#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# https://wiki.archlinux.org/index.php/Fzf
source /usr/share/fzf/key-bindings.zsh
source /usr/share/fzf/completion.zsh

source /usr/share/nvm/init-nvm.sh

eval "$(fasd --init auto)"

eval "$(pyenv init -)"

# Some functions to load into zsh
fpath=( $HOME/documents/zsh_functions $fpath )
autoload -Uz mkcd vimag vimfind vimgit mkcp backport clone upfed

# https://nuclearsquid.com/writings/edit-long-commands/
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

#
# Configure gpg and ssh agents: https://wiki.archlinux.org/index.php/GnuPG
#
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi
# Set GPG TTY
export GPG_TTY=$(tty)
# Refresh gpg-agent tty in case user switches into an X session
gpg-connect-agent updatestartuptty /bye >/dev/null

# show the error code
PROMPT='%(?.%F{magenta}.%F{red}$?)❯%f '

#
# Aliases
#

alias ls='exa -F --group-directories-first --color=auto'
alias vim=nvim
alias pacman="pacman --hookdir $HOME/.config/pacman/hooks"
alias pacmatic="pacmatic --hookdir $HOME/.config/pacman/hooks"
alias cat='bat'

# # Will return non-zero status if the current directory is not managed by git
# is_in_git_repo() {
#   git rev-parse HEAD > /dev/null 2>&1
# }
# 
# git_tag() {
#   # "Nothing to see here, move along"
#   is_in_git_repo || return
# 
#   # Pass the list of the tags to fzf-tmux
#   # - "{}" in preview option is the placeholder for the highlighted entry
#   # - Preview window can display ANSI colors, so we enable --color=always
#   # - We can terminate `git show` once we have $LINES lines
#   git tag --sort -version:refname |
#     fzf-tmux --multi --preview-window right:70% \
#              --preview 'git show --color=always {} | head -'$LINES
# }
# 
# # A helper function to join multi-line output from fzf
# join-lines() {
#   local item
#   while read item; do
#     echo -n "${(q)item} "
#   done
# }
# 
# fzf-gt-widget() LBUFFER+=$(gt | join-lines)
# zle -N fzf-gt-widget
# bindkey '^g^t' fzf-gt-widget
